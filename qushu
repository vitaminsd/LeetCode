/*
有一个数组 x[]= {x1, x2, ..., xn}, 和一个 数 N
两个人轮流取数，每次只能取数组x中的数，谁最后取完即算赢，如果剩余的数小于里面的最小值，也算赢。
如果两个人都采取最优策略去取数，问给定数组x和数N，谁会赢。

例如 x[] = {2, 1, 4},  N = 5
如果A先取2，余3；B不论取1或者2，都输，所以为5时先取的人赢
*/

/*
用dp
从1开始考虑，如果为列表中的值或者小于其中的最小值，为赢, 标记为true
否则当前这个值m必定输，此时m + 列表中的任意一个值都为赢，标记为true
*/

bool solve(int target, int x[], int n) {

	int minN = 0;
	vector<int> dp(target + 1, 0);
	// 在列表中的值为必胜
	for (int t = 0; t < n; t++) {
	  minN = min(minN, x[t]);
		if (x[t] <= target)
			dp[ x[t] ] = 1;
	}

	for (int i = 1; i <= target; i++) {
		// 小于其中最小值为必胜
		if (i < minN)
			dp[i] = 1; 

		if (dp[i] == 0) { // 如果当前的值为必输，则当期的值 + 列表中的任一值为必胜
			for (int j = 0; j < n; j++) {
				if ( i + x[j] <= target )
					dp[ i + x[j] ] = 1;
			}
		}
	}

	return dp[target] == 1;
}
